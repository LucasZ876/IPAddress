instructions

These procedures are not difficult if you follow the steps carefully.


To update the javadoc
---------------------

1. Check out into your Eclipse workspace the master branch of the IPAddress Eclipse project in the IPAddress repository which contains this file.
https://github.com/seancfoley/IPAddress

2. Check out into your Eclipse workspace the master branch of the "Functional Doclet for Javadoc" Eclipse project in the Functional-Doclet-for-Javadoc repository.
https://github.com/seancfoley/Functional-Doclet-for-Javadoc

3. Run the build.xml ant task to generate the javadoc into the javadoc folder in the IPAddress project

4. In eclipse you switch the IPAddress project to the local gh-pages branch.  Do not commit the javadoc files before doing so.  
Since those files do not belong to any branch, they will remain in your IPAddress project as you switch branches.

5. Once in gh-pages, you cut and paste the new javadoc files from the uncommitted javadoc folder to the apidocs folder, overwriting the old ones.
From command line: 
cd ~/git/IPAddress/IPAddress/javadoc
cp -r * ../apidocs



6. You commit and push the new contents in the apidocs folder.

Done.


To update the gh-pages docs
---------------------------

Thankfully this is much easier than before, no more odt, no more docx.  
The master file is now the file ipaddress.md in the repo.  

You have two options:

Option 1. Make edits directly in github.  https://github.com/seancfoley/IPAddress/edit/gh-pages/ipaddress.md

Option 2. Check out the repo gh-pages branch, then use Atom to edit.  Use the markdown preview using Ctl-Shift-M.



To do a release (see build.xml for additional complexities with Java 8 vs 9)
----------------------

A Branching 

0. If you are doing a major release, in gh-pages branch create a new folder with the old docs and put a link to it from the main page, to preserve them.
Also link back from the old docs to the new.
Figure out your branching strategy for the release, if applicable, branch if necessary, and then work off the old or new branch to provide the release.
If your previous release is based on the master branch,
you will first want to ensure you create a branch for the previous release before you check your new code into master for the new release.

If you create the new branch on github, you might not be able to see it with "git branch -r" or most other git commands.
Use "git ls-remote --heads origin" to see it.  From there, I believe "refs/heads/<branchname>" is the full branch name and you maybe be able to use that name to track it 
See https://stackoverflow.com/a/50192006/6801443 and https://intellipaat.com/community/13708/git-list-remote-branches-how-do-i-list-all-remote-branches-in-git-1-7).

B Github

1. Edit the release "version" property in build.xml

NOTE: Currently we've had to separate javadoc creation from the creation of dist jar or maven, 
see notes in build.xml for the reason.
You need the project at compile level 9 with a jre >= 9 (last time used 11).
a. Create the javadoc first using Java 8, altering the jdk used by the build.xml ant build run config to be version 8.  
Make sure you choose a non-plugin JDK.  It can be a Mac OS VM if you want.  It needs to use the tools.jar for the doclet.
b. Then switch over the job to jre >= 9.  Then ensure your module-info.java is uncommented.  
Then create the dist jar with java 9 in the same JVM as Eclipse, otherwise ant won't work.

2. Use build.xml to first "create javadoc" running in separate Java 8 JRE.  If any javadoc errors, fix them and retry.

3. Use build.xml to "create dist jar" running in jdk >= 9, maybe the same as used by the workspace.

4. Replace the checked-in file IPAddress.jar with the dist jar created.

5. Commit and push the changes (build.xml and IPAddress.jar and any source file changes not yet pushed).

6. Edit the readme.md of the branch you are releasing from (the latest version), as well as on master if not the same.

7. Create the release using the github releases button on the releases page, 
which allows you to select the branch.
This creates the tag as well (but does not create a branch).  The tags have the format vx.x.x
Add the dist jar from (2) to the release.  
The source code zip and tar files are automatically created by github.
If something goes wrong, move the tag: https://stackoverflow.com/questions/8044583/how-can-i-move-a-tag-on-a-git-branch-to-a-different-commit

C Maven

8. Use build.xml to "sign maven artifacts", which will also run "create maven artifacts" first.  You should see the maven artifacts created (in the dir mavenlib).

The signing will create a batch file to do the signing.  Running gpg directly from the Ant JVM seems to result in gpg hanging.  So run the same gpg commands from the command prompt or use the batch file.

9. Complete the signing using batch file or command line.  You should see the signed artifacts created, for each artifact another file is created with the ".asc" extension added to the artifact name.
You may need to run "sudo -i" first.

10. Remove the batch file sign.bat.  Create the bundle bundle.jar using build.xml to "create maven bundle".

11. Follow instructions here for manual deployment:
http://central.sonatype.org/pages/manual-staging-bundle-creation-and-deployment.html
which requires that you go here https://oss.sonatype.org/ to upload.

 Instructions there are:
	Once bundle.jar has been produced, log into OSSRH, and select Staging Upload in the Build Promotion menu on the left:

	From the Staging Upload tab, select Artifact Bundle from the Upload Mode dropdown:

	Then click the Select Bundle to Upload button, and select the bundle you just created:

	Click the Upload Bundle button. If the upload is successful, a staging repository will be created, and you can proceed with releasing.

	Access the Build Promotion menu in the left hand navigation and select the Staging Repositories item. 
	
	Select the staging repository and the panel below the list will display further details about the repository. In addition the buttons Close and Release will be activated.

	Release Your Staging Repository if it looks good.  Otherwise, Drop it.
	
https://issues.sonatype.org/browse/OSSRH-27241 was the first sonatype issue that was dropped.
Your original sonatype JIRA issue is https://issues.sonatype.org/browse/OSSRH-28545

Use your sonatype user/pw.

12. Go to maven central repository, https://search.maven.org/, and browse or search for your release.  It will not show up immediately.
It may take about 10 minutes.

13. Once they are there, use an eclipse maven project to add as a dependency and check it shows up.  You can run some code in a main method as well for further testing.






