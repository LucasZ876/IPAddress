Version 5.5:

-added a collection type for dual IPv4/v6 tries and another for dual IPv4/v6 associative tries, issue #103
-trie performance improvements for all trie operations
-added shortestPrefixMatch trie methods
-added enumerate methods, the inverse of the increment methods, to find the position of an address in a subnet, or to find the distance between two addresses
-added an increment method accepting a BigInteger argument to IPv6Address and IPv6AddressSection
-added the ability to construct an IPv6Address from two longs
-added replace methods to address classes that take address sections 
-added overlaps methods to check for overlapping subnets, and for checking sequential range overlap with a subnet
-added floor/lower/ceiling/higher methods to the address trie types, these methods were previously accessible only from trie sets
-added the extraneous digits IPv4 parsing option allow_inet_aton_extraneous_digits, issue #105.  
-includes the fix to invalid radix argument infinite loop, issue #118


Version 5.4:

-added PrefixBlockAllocator for automatic CIDR prefix block allocation
-added AddedTree and AssociativeAddedTree classes for expanded constructAddedNodesTree methods
-added getBlockSize and getBitsForCount in AddressItem
-added matchUnordered and matchOrdered in Address
-eliminated invalid AddressValueException when joining a range with the IPv4 max value to an IPv6 range, issue #86
-fix to generation of strings from parsed address data, issue #87
-fix to IPv4 address primitive int upper value generation, issue #96


Version 5.3:

This version introduces address tries, associative address tries, address sets backed by address tries, and maps backed by associative address tries

-added AddressTrie and its subclasses for IPv4, IPv6 and MAC
-added AssociativeAddressTrie and its subclasses for IPv4, IPv6 and MAC
-tries can be used as Java collections framework navigable set
-associative tries can be used as Java collections framework navigable map
-added testBit and isOneBit methods to all series and segments


Version 5.2:

This version introduces methods for Java 8 functional-style operations.

-added stream methods for addresses, address sections, address segments, and ip address sequential ranges: stream, prefixStream, prefixStream(int prefixLength), prefixBlockStream, prefixBlockStream(int prefixLength), blockStream(int segmentCount), sequentialBlockStream, segmentsStream
-added corresponding spliterator methods: spliterator, prefixSpliterator, prefixSpliterator(int prefixLength), prefixBlockSpliterator, prefixBlockSpliterator(int prefixLength), blockSpliterator(int segmentCount), sequentialBlockSpliterator, segmentsSpliterator
-added functions to create a single stream from multiple spliterators in AddressComponentRange:
-<T extends AddressComponent> Stream<T> stream(Function<T, Stream<? extends T>> addrStreamFunc, T ...components)
-<T extends AddressComponent> Stream<T> stream(Function<T, Stream<? extends T>> addrStreamFunc, Collection<? extends T> components)
-added coverWithPrefixBlock method to find single covering prefix block, the smallest prefix block covering two subnets or addresses
-added IPAddressString and HostName parsed mask access through getMask method
-made sub-typing of address classes easier by loosening restrictions on using multiple network objects
-altered network mask with prefix length so that it is single host


Version 5.1:

Mostly parsing and masking improvements.

-getSequentialRange() method added to IPAddressString for direct access to sequential range
-improved handling of masking and bitwise-oring subnets. isMaskCompatibleWithRange replaced by maskRange, same with bitwise-or.
-getDivisionGrouping() method added to IPAddressString for "as-is" parsing
-toString() for division strings adjusted, no longer using '*' due to varying bit lengths for divisions and potentially no segment separator to indicate bit length, also using radix matching parsed string
-reverse ranges allowed in parsed strings
-improved control/support of inferred range boundaries


Version 5 release:

This version introduces new address range classes and reorganizes classes and code in the inet.ipaddr.format package.

-parsing performance improvements
-prefixEquals and contains methods to IPAddressString for optimized containment checks
-added increment(long) and incrementBoundary(long) methods
-added address range functionality with the new IPAddressSeqRange class and the IPv4 and IPv6 subclasses
-added IPAddressRange interface for commonality between IPAddress and IPAddressSeqRange ranges
-reorganization of classes and interfaces in inet.ipaddr.format package to standard, large, and string subpackages
-expansion of the large division functionality, which uses BigInteger for address division values, to match the standard functionality which uses longs for address divisions
-new static toNormalizedString string production methods to produce strings directly without intervening objects
-new iterators: blockIterator(int), sequentialBlockIterator(), prefixIterator(), prefixBlockIterator(int), and their associated count methods, namely getSequentialBlockCount to go with sequentialBlockIterator() and prefixCount to go with iterator(), nonZeroHostIterator() and prefixBlockIterator(). Also added the isSequential() method.
-added mergeToSequentialBlocks to match mergeToPrefixBlocks
-works with Java 8, 9, 10, 11 and upwards, comprises the inet.ipaddr module for Java 9 and upwards
-distributed jars are compiled with java 8, but those jars also include the module-info class for the Java Platform Module System (JPMS) 
introduced with Java 9
-fully compatible with Android using Android API level 24 or higher.


Version 4 release:

The main change in version 4 is a change to the way IP addresses with prefix length are handled,
as well as options for going back to the old behaviour, or using a third option (see PrefixConfiguration class or the docs for details on the options)

-added prefix length handling options
-changes to network classes and address classes to support prefix handling options
-runtime exception refactoring - reorganized them and added more error checking
-added new method options to ignore IPv4 network or IPv6 subnet router anycast (ie the zero host) address when iterating or getting lowest address in a subnet
-added new conversions to/from BigInteger, int, long
-added intersect method
-added toPrefixBlock method
-added IPAddressSegmentSeries interface for a shared interface amongst IP addresses and address sections
-renamed a bunch of methods:
	isRangeEquivalentToPrefix renamed to isSinglePrefixBlock
	getEquivalentPrefix renamed to getPrefixLengthForSingleBlock
	toPrefixedEquivalent renamed to assignPrefixForSingleBlock
	isRangeUnchanged renamed to isPrefixBlock(Integer) 
	getMinPrefix renamed to getMinPrefixLengthForBlock
	toMinPrefixedEquivalent renamed to assignMinPrefixForBlock
	getMaskPrefixLength renamed to getBlockMaskPrefixLength
	matchesWithPrefix renamed to matchesWithPrefixMask
	isRangeEquivalent renamed to isPrefixBlock
	isMultipleByNetworkPrefix is replaced by isSinglePrefixBlock
-moved a few static methods:
	IPAddress.getStandardLoopbackStrings, IPAddress.getLoopback available from class IPAddressNetwork
	IPAddress.from available as IPAddressNetwork.IPAddressGenerator.from
	IPAddress.getLocalHost is removed.  Instead use IPAddressNetwork.IPAddressGenerator.from on the result of InetAddress.getLocalHost().getAddress() 
	Some network object access methods have been changed.  You can address default network object directly from defaultIpv4Network, defaultIpv6Network and defaultMACNetwork in class Address

Version 4 is not backwards compatible with version 3, but migration is straightforward.


Version 3 release:

Version 3 additions
-MAC address support
-MAC address integration with IPv6
-IPv6 base 85 strings, both parsing and producing
-parsing and producing hex strings
-IPvx octal and binary strings
-new address framework
-UNC IPv6 literal strings, both parsing and producing
-Reverse DNS lookup strings, both parsing and producing
-new reverse operations - reverse bits, bits, segments, bits per segment
-new set of prefix and mask operations: set/apply/adjust/removePrefixLength, mask, maskNetwork, bitwiseOr, bitwiseOrNetwork
-new set of section operations, append/prepend/replace, also getSection variants
-parse host names with ports
-parsing delimited segments 1,2.3.4,5,6.7
-improved host identifier string caches
-getHostAddress in IPAddressString


Version 3 is not backwards compatible with version 2, but migration is straightforward.

No functionality has been removed. A few classes and methods have been renamed.
-toSubnet methods replaced by mask, maskNetwork, setPrefixLength, applyPrefixLength, removePrefixLength, adjustPrefixLength.
-IPAddressStringException is now AddressStringException
