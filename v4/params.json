{
  "name": "IPAddress",
  "tagline": "Library for handling IP addresses, both IPv4 and IPv6",
  "body": "### Benefits of this Library\r\nThe library was intended to satisfy the following primary goals:\r\n\r\n* Support parsing of all host and ipv4/ipv6 address formats in usage plus some additional formats (see below or see javadoc for IPAddressString class for the extensive list)\r\n\r\n* Support both the parsing and representation of subnets, either those specified by network prefix length or those specified with ranges of segment values.  All strings in the list below represent the same IPv4 subnet:\r\n  * CIDR network prefix length:1.2.0.0/16\r\n  * with mask: 1.2.0.0/255.255.0.0\r\n  * wildcard segments: 1.2.*.*\r\n  * range segments: 1.2.0-255.0-255\r\n  * range using inet_aton format: 0x1.0x2.0x0-0xffff\r\n  * SQL-style single wildcards to end segments: 1.2.___.___\r\n  * IPv4 mapped IPv6: ::ffff:1.2.0.0/112\r\n\r\n* Allow the separation of address parsing from host parsing.  In some cases you may have an address,  in others you may have a host name, in some cases either one, so this supports all three options (for instance, when validating invalid input “1.2.3.a” as an address only, it will not be treated as a host with DNS lookup attempted in the way that InetAddress.getByName does)\r\n\r\n* Allpw control over which formats are allowed, whether IPv4/6, or subnets, or inet_aton formats, and so on.\r\n\r\n* Support the production of collections of valid IPv4 and IPv6 address strings of different formats for a given address.\r\nSome addresses can have hundreds of thousands of potential string representations (when you consider hex capitalization, ipv6 compression, and leading zeros, the various IPv4 and IPv6 formats, and combinations of all the above), although there are generally a handful of commonly used formats.  Generating these strings, whether the handful of commonly used strings or whether the exhaustive lists of all possible strings, can help when searching or matching addresses in databases or text.\r\n\r\n* Polymorphism in the code for IPv4/IPv6 for applications which must support both transparently.\r\n\r\n* Thread-safety and immutability.  The core objects (host names, address strings, addresses, address sections, address segments) are all immutable (like java.lang.String or java.lang.Integer instances).  They do not change values.  Additionally, some state (such as string representations) is generated upon demand and/or cached in a thread-safe manner.\r\n\r\n* Manipulation of addresses with prefixes, masks, sections, segments and subnetting: applying network prefixes, masking, splitting addresses into sections, joining address segments into larger segments, generating new subnets and supernets from existing addresses and subnets, iterating through subnets, checking containment within subnets, ipv4-ipv6 conversion\r\n\r\n* Sorting and comparison of host names, addresses, address strings and subnets\r\n\r\n* Integrates with the java classes InetAddress, Inet6Address, Inet4Address.\r\n\r\n## Supported formats\r\nThis includes, those supported by inet_aton or inet_pton, the subnet formats listed above, all combinations of the above, and others:   \r\n* all the formats supported by inet_pton and inet_aton\r\n* all the formats supported by nmap\r\n* all the subnet formats listed above, whether prefixed, masked, wildcards, ranges\r\n* IPV6 canonical, compressed (1::1), mixed (1:2:3:4:5:6:1.2.3.4), [bracketed], and so on\r\n* \\* represents all addresses both ipv4 and ipv6\r\n* /x which is just a network prefix length x with no associated address, is considered to be the mask for that network prefix length\r\n* “” the empty string is considered the default loopback\r\nFor a more detailed list or formats parsed, see the javadoc for IPAddressString.\r\n\r\n## Subnet formats\r\n* **CIDR (Classless Inter-Domain Routing) prefix length subnets: **\r\nAdding the prefix length /x creates the subnet for that network prefix length.  So the subnet 1.2.0.0/16 is the set of all addresses starting with 1.2\r\n* **Wildcard (\\* _) and range (-) subnets:**\r\n\\* denotes all possible values in one or more segments, so 1.*.*.* or just 1.* is equivalent to 1.0.0.0/8\r\n0-1 denotes the range from 0 to 1 \r\n_ replaces any digit at the end of a segment, for example 1_ represents 10 to 19 in decimal or 10 to 1f in hex\r\n* **Combinations:**\r\nApplying a prefix length to a subnet simply applies the prefix to every element of the subnet.  1.*.0.0/16 is the same subnet of addresses as 1.0.0.0/8\r\n\r\n\r\n---------\r\n\r\n### Designer Templates\r\nWe’ve crafted some handsome templates for you to use. Go ahead and click 'Continue to layouts' to browse through them. You can easily go back to edit your page before publishing. After publishing your page, you can revisit the page generator and switch to another theme. Your Page content will be preserved.\r\n\r\n### Creating pages manually\r\nIf you prefer to not use the automatic generator, push a branch named `gh-pages` to your repository to create a page manually. In addition to supporting regular HTML content, GitHub Pages support Jekyll, a simple, blog aware static site generator. Jekyll makes it easy to create site-wide headers and footers without having to copy them across every page. It also offers intelligent blog support and other advanced templating features.\r\n\r\n### Authors and Contributors\r\nYou can @mention a GitHub username to generate a link to their profile. The resulting `<a>` element will link to the contributor’s GitHub Profile. For example: In 2007, Chris Wanstrath (@defunkt), PJ Hyett (@pjhyett), and Tom Preston-Werner (@mojombo) founded GitHub.\r\n\r\n### Support or Contact\r\nHaving trouble with Pages? Check out our [documentation](https://help.github.com/pages) or [contact support](https://github.com/contact) and we’ll help you sort it out.\r\n",
  "note": "Don't delete this file! It's used internally to help with page regeneration."
}